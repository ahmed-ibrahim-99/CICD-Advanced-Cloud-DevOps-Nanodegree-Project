version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  notify_failure:
    steps:
      - slack/notify:
          event: fail
          mentions: "@Ahmed_Ibrahim"
          template: basic_fail_1
  destory_environment_on_failure:
    steps:
      - run:
          name: Infrastructure Rollback
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end build
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_failure
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command:  |
            cd frontend
            npm install
            npm run test
      - notify_failure

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command:  |
            cd backend
            npm install
            npm run test
      - notify_failure
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end audit
          command:  |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit fix
            npm audit --audit-level=critical
      - notify_failure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end audit
          command:  |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit fix
            npm audit --audit-level=critical
      - notify_failure
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip utilities
          command: yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exist
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-backend
            cd ../..
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-frontend
            cd ../..
      - run:
          name: Add backend instance ips
          command: |
            cd .circleci/ansible
            rm inventory.txt;
            echo "[backend]" >> inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend" \
              --output text >> inventory.txt
            cd ../..
      - persist_to_workspace:
          root: ~/
          paths:
            - project/*
      - destory_environment_on_failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["e7:2e:e3:83:66:0d:62:d4:ad:d7:73:fb:f5:b3:19:a3"]
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible
      - run:
          name: Run Playbook and Configure Servers
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/*
      - destory_environment_on_failure


workflows:
  default:
    jobs:
      - build-frontend:
          context: ${SLACK_CONTEXT}
      - build-backend:
          context: ${SLACK_CONTEXT}
      - test-frontend:
          requires: [build-frontend]
          context: ${SLACK_CONTEXT}
      - test-backend:
          requires: [build-backend]
          context: ${SLACK_CONTEXT}
      - scan-frontend:
          requires: [build-frontend]
          context: ${SLACK_CONTEXT}
      - scan-backend:
          requires: [build-backend]
          context: ${SLACK_CONTEXT}
      - deploy-infrastructure:
          requires: [scan-frontend, test-frontend, scan-backend, test-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]