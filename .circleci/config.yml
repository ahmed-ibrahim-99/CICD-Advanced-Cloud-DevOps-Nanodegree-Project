version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  notify_failure:
    steps:
      - slack/notify:
          event: fail
          mentions: "@Ahmed_Ibrahim"
          template: basic_fail_1
  destory_environment_on_failure:
    steps:
      - run:
          name: Infrastructure Rollback
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end build
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_failure
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command:  |
            cd frontend
            npm install
            npm run test
      - notify_failure

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command:  |
            cd backend
            npm install
            npm run test
      - notify_failure
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end audit
          command:  |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit fix
            npm audit --audit-level=critical
      - notify_failure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end audit
          command:  |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit fix
            npm audit --audit-level=critical
      - notify_failure
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: cd ./.circleci/ansible
      - run:
          name: Install tar and gzip utilities
          command: yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add instance ip
          command: |
            rm inventory;
            echo "[all]" >> inventory;
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=Udacity" \
            --output text >> inventory;
      - destory_environment_on_failure
      - notify_failure

workflows:
  default:
    jobs:
      - build-frontend:
          context: Slack-Notifications-Udacity-Project
      - build-backend:
          context: Slack-Notifications-Udacity-Project
      - test-frontend:
          requires:
            - build-frontend
          context: Slack-Notifications-Udacity-Project
      - test-backend:
          requires:
            - build-backend
          context: Slack-Notifications-Udacity-Project
      - scan-frontend:
          requires:
            - build-frontend
          context: Slack-Notifications-Udacity-Project
      - scan-backend:
          requires:
            - build-backend
          context: Slack-Notifications-Udacity-Project
      - deploy-infrastructure:
          requires:
            - scan-frontend
            - test-frontend
            - scan-backend
            - test-backend
          context: Slack-Notifications-Udacity-Project